<?xml version="1.0" encoding="utf-8"?>
<launch>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find newbot2)/worlds/competition_arena.world"/>
  </include>
  <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 dummy base_footprint 40" />

  <arg name="model" default="$(find newbot2)/urdf/newbot2.xacro"/>
  <!--   three driving type front, rear, four(todo) -->
  <arg name="driving_type" default="rear"/>
  <param name="driving_type_param" value="$(arg driving_type)"/>

  <param name="robot_description" command="$(find xacro)/xacro $(arg model) driving_type:=$(arg driving_type)" />
  <param name="my_robot" value="newbot2"/>

  <arg name="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>

  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="$(arg init_pose) -param robot_description -urdf -model my_robot"
    output="screen" />
  <node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />

  <!--controller-->
  <rosparam command="load"
      file="$(find newbot2)/config/controllers/$(arg driving_type)_driving.yaml"/>


  <node name="car_controller_spawner" pkg="controller_manager" type="spawner"
    args="newbot2/joint_state_controller
          newbot2/steering_controller  
          newbot2/driving_controller_$(arg driving_type)"/>
 

</launch>
